{
  "hash": "229454eb3f667c542fa5d05ce619b8a3",
  "result": {
    "markdown": "---\ntitle: \"Linear and nonlinear regression\"\ndate: \"2023-11-19\"\nimage: \"Image.png\"\nauthor: Swethaa\n---\n\n```{=html}\n<h3>a)Linear Regression\n</h3> \n    <h3>Index</h3>\n    <ul>\n        <li>What is Linear Regression</li>\n        <li>Types of Linear Regression</li>\n        <li>Training a Linear Regression Model</li>\n        <li>Finding the best fit line</li>\n    </ul>\n    <h3>What is Linear Regression</h3>\n    <p>One of the simplest and most widely used machine learning algorithms is linear regression. It's a statistical technique for forecasting analysis. For continuous, real, or numerical variables like sales, salary, age, product price, etc., linear regression generates predictions.</p>\n    <p>Mathematically, we can represent a linear regression as:</p>\n    <b>y= a0+a1x+ ε</b>\n    <ul>\n        <li>Y= Dependent Variable (Target Variable)</li>\n        <li>X= Independent Variable (predictor Variable)</li>\n        <li>a0= intercept of the line (Gives an additional degree of freedom)</li>\n        <li>a1 = Linear regression coefficient (scale factor to each input value).</li>\n        <li>ε = random error</li>\n    </ul>\n    <p></p> The values for x and y variables are training datasets for Linear Regression model representation.</p>\n    <h3>Types of Linear Regression</h3>\n    <ul>\n        <li> <b>Simple Linear Regression</b>\n            <p>A linear regression algorithm is referred to as simple linear regression if it uses one independent variable to predict the value of a numerical dependent variable.</p>\n            <h4> <b>Y=β 0+β 1⋅X+ε</b></h4>\n            <ul>\n                <li>\n                    Y is the dependent variable.\n                </li>\n                <li>X is the independent variable.</li>\n                <li>β 0is the intercept (where the line crosses theY-axis).</li>\n                <li>β 1 is the slop (the change in Y for a one-unitchange in X).</li>\n                <li>ε is the error term, representing the variability in Y that is not explained by the linear relationship withX</li>\n            </ul>\n        </li>\n        <li> <b>Multiple Linear Regression</b>\n            <p>A type of linear regression algorithm known as multiple linear regression is used to predict the value of a numerical dependent variable by utilizing multiple independent variables.</p>\n            <h4> <b>Y=β 0+β 1⋅X 1 +β 2⋅X 2 +…+β n⋅X n+ε </b></h4>\n            <ul>\n                <li>\n                    Y is the dependent variable.\n                </li>\n                <li>X 1,X 2,…,Xn are the independent variables</li>\n                <li>β 0is the intercept </li>\n                <li>β1,β 2,…,β nare the coefficients representing the impact of each independent variable.</li>\n                <li>ε is the error term</li>\n            </ul>\n        </li>\n    </ul>\n    <h3>Training a Linear Regression Model</h3>\n    <p>Finding the values of the coefficients (β0,β1,...,βn) that minimize the sum of squared differences between the predicted and actual values in the training data is the first step in training a linear regression model.</p>\n    <h3>Finding the best fit line</h3>\n    <p>The best fit line should be found in order to minimize the error between the predicted and actual values. There will be the least error in the best fit line. We use the cost function to calculate the best values for a0 and a1 in order to find the best fit line because different weights or coefficients of lines (a0, a1) result in different regression lines.</p>\n    <h3>Continuous random variable</h3>\n    <p>A continuous random variable has two main characteristics:</p>\n    <p>Since there is no countable range of possible values, we integrate a function known as the probability density function to find the likelihood that a given value will fall within a given interval.</p>\n    <h3>Common continuous distributions</h3>\n    <p>Some examples of continuous distributions that are commonly used in statistics and probability theory can be found in the following table.</p>\n    <table>\n        <tr>\n            <th>Name of the continuous distribution</th>\n            <th>Support</th>\n        </tr>\n        <tr>\n            <td>Uniform</td>\n            <td>All the real numbers in the interval [0,1]</td>\n        </tr>\n         <tr>\n            <td>Normal</td>\n            <td>The whole set of real numbers</td>\n        </tr>\n         <tr>\n            <td>Chi-square</td>\n            <td>The set of all non-negative real numbers</td>\n        </tr>\n    </table>\n    <img src=\"Image2.png\" alt=\"\" height=\"300px\" width=\"300px\">\n```\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nimport warnings\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings('ignore')\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf = pd.read_csv('CarPrice_Assignment.csv')\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>car_ID</th>\n      <th>symboling</th>\n      <th>CarName</th>\n      <th>fueltype</th>\n      <th>aspiration</th>\n      <th>doornumber</th>\n      <th>carbody</th>\n      <th>drivewheel</th>\n      <th>enginelocation</th>\n      <th>wheelbase</th>\n      <th>...</th>\n      <th>enginesize</th>\n      <th>fuelsystem</th>\n      <th>boreratio</th>\n      <th>stroke</th>\n      <th>compressionratio</th>\n      <th>horsepower</th>\n      <th>peakrpm</th>\n      <th>citympg</th>\n      <th>highwaympg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>3</td>\n      <td>alfa-romero giulia</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>...</td>\n      <td>130</td>\n      <td>mpfi</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n      <td>13495.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>3</td>\n      <td>alfa-romero stelvio</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>...</td>\n      <td>130</td>\n      <td>mpfi</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n      <td>16500.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>alfa-romero Quadrifoglio</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>hatchback</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>94.5</td>\n      <td>...</td>\n      <td>152</td>\n      <td>mpfi</td>\n      <td>2.68</td>\n      <td>3.47</td>\n      <td>9.0</td>\n      <td>154</td>\n      <td>5000</td>\n      <td>19</td>\n      <td>26</td>\n      <td>16500.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>2</td>\n      <td>audi 100 ls</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>fwd</td>\n      <td>front</td>\n      <td>99.8</td>\n      <td>...</td>\n      <td>109</td>\n      <td>mpfi</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>10.0</td>\n      <td>102</td>\n      <td>5500</td>\n      <td>24</td>\n      <td>30</td>\n      <td>13950.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>2</td>\n      <td>audi 100ls</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>4wd</td>\n      <td>front</td>\n      <td>99.4</td>\n      <td>...</td>\n      <td>136</td>\n      <td>mpfi</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>8.0</td>\n      <td>115</td>\n      <td>5500</td>\n      <td>18</td>\n      <td>22</td>\n      <td>17450.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 26 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nIndex(['car_ID', 'symboling', 'CarName', 'fueltype', 'aspiration',\n       'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase',\n       'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype',\n       'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke',\n       'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg',\n       'price'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 205 entries, 0 to 204\nData columns (total 26 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   car_ID            205 non-null    int64  \n 1   symboling         205 non-null    int64  \n 2   CarName           205 non-null    object \n 3   fueltype          205 non-null    object \n 4   aspiration        205 non-null    object \n 5   doornumber        205 non-null    object \n 6   carbody           205 non-null    object \n 7   drivewheel        205 non-null    object \n 8   enginelocation    205 non-null    object \n 9   wheelbase         205 non-null    float64\n 10  carlength         205 non-null    float64\n 11  carwidth          205 non-null    float64\n 12  carheight         205 non-null    float64\n 13  curbweight        205 non-null    int64  \n 14  enginetype        205 non-null    object \n 15  cylindernumber    205 non-null    object \n 16  enginesize        205 non-null    int64  \n 17  fuelsystem        205 non-null    object \n 18  boreratio         205 non-null    float64\n 19  stroke            205 non-null    float64\n 20  compressionratio  205 non-null    float64\n 21  horsepower        205 non-null    int64  \n 22  peakrpm           205 non-null    int64  \n 23  citympg           205 non-null    int64  \n 24  highwaympg        205 non-null    int64  \n 25  price             205 non-null    float64\ndtypes: float64(8), int64(8), object(10)\nmemory usage: 41.8+ KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>car_ID</th>\n      <th>symboling</th>\n      <th>wheelbase</th>\n      <th>carlength</th>\n      <th>carwidth</th>\n      <th>carheight</th>\n      <th>curbweight</th>\n      <th>enginesize</th>\n      <th>boreratio</th>\n      <th>stroke</th>\n      <th>compressionratio</th>\n      <th>horsepower</th>\n      <th>peakrpm</th>\n      <th>citympg</th>\n      <th>highwaympg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>103.000000</td>\n      <td>0.834146</td>\n      <td>98.756585</td>\n      <td>174.049268</td>\n      <td>65.907805</td>\n      <td>53.724878</td>\n      <td>2555.565854</td>\n      <td>126.907317</td>\n      <td>3.329756</td>\n      <td>3.255415</td>\n      <td>10.142537</td>\n      <td>104.117073</td>\n      <td>5125.121951</td>\n      <td>25.219512</td>\n      <td>30.751220</td>\n      <td>13276.710571</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>59.322565</td>\n      <td>1.245307</td>\n      <td>6.021776</td>\n      <td>12.337289</td>\n      <td>2.145204</td>\n      <td>2.443522</td>\n      <td>520.680204</td>\n      <td>41.642693</td>\n      <td>0.270844</td>\n      <td>0.313597</td>\n      <td>3.972040</td>\n      <td>39.544167</td>\n      <td>476.985643</td>\n      <td>6.542142</td>\n      <td>6.886443</td>\n      <td>7988.852332</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>-2.000000</td>\n      <td>86.600000</td>\n      <td>141.100000</td>\n      <td>60.300000</td>\n      <td>47.800000</td>\n      <td>1488.000000</td>\n      <td>61.000000</td>\n      <td>2.540000</td>\n      <td>2.070000</td>\n      <td>7.000000</td>\n      <td>48.000000</td>\n      <td>4150.000000</td>\n      <td>13.000000</td>\n      <td>16.000000</td>\n      <td>5118.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>52.000000</td>\n      <td>0.000000</td>\n      <td>94.500000</td>\n      <td>166.300000</td>\n      <td>64.100000</td>\n      <td>52.000000</td>\n      <td>2145.000000</td>\n      <td>97.000000</td>\n      <td>3.150000</td>\n      <td>3.110000</td>\n      <td>8.600000</td>\n      <td>70.000000</td>\n      <td>4800.000000</td>\n      <td>19.000000</td>\n      <td>25.000000</td>\n      <td>7788.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>103.000000</td>\n      <td>1.000000</td>\n      <td>97.000000</td>\n      <td>173.200000</td>\n      <td>65.500000</td>\n      <td>54.100000</td>\n      <td>2414.000000</td>\n      <td>120.000000</td>\n      <td>3.310000</td>\n      <td>3.290000</td>\n      <td>9.000000</td>\n      <td>95.000000</td>\n      <td>5200.000000</td>\n      <td>24.000000</td>\n      <td>30.000000</td>\n      <td>10295.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>154.000000</td>\n      <td>2.000000</td>\n      <td>102.400000</td>\n      <td>183.100000</td>\n      <td>66.900000</td>\n      <td>55.500000</td>\n      <td>2935.000000</td>\n      <td>141.000000</td>\n      <td>3.580000</td>\n      <td>3.410000</td>\n      <td>9.400000</td>\n      <td>116.000000</td>\n      <td>5500.000000</td>\n      <td>30.000000</td>\n      <td>34.000000</td>\n      <td>16503.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>205.000000</td>\n      <td>3.000000</td>\n      <td>120.900000</td>\n      <td>208.100000</td>\n      <td>72.300000</td>\n      <td>59.800000</td>\n      <td>4066.000000</td>\n      <td>326.000000</td>\n      <td>3.940000</td>\n      <td>4.170000</td>\n      <td>23.000000</td>\n      <td>288.000000</td>\n      <td>6600.000000</td>\n      <td>49.000000</td>\n      <td>54.000000</td>\n      <td>45400.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n(205, 26)\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf.isnull()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>car_ID</th>\n      <th>symboling</th>\n      <th>CarName</th>\n      <th>fueltype</th>\n      <th>aspiration</th>\n      <th>doornumber</th>\n      <th>carbody</th>\n      <th>drivewheel</th>\n      <th>enginelocation</th>\n      <th>wheelbase</th>\n      <th>...</th>\n      <th>enginesize</th>\n      <th>fuelsystem</th>\n      <th>boreratio</th>\n      <th>stroke</th>\n      <th>compressionratio</th>\n      <th>horsepower</th>\n      <th>peakrpm</th>\n      <th>citympg</th>\n      <th>highwaympg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>200</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>201</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>202</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>203</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>204</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>205 rows × 26 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nsns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-2.png){width=540 height=513}\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf.dropna(inplace =True)\ndf.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\ncar_ID              0\nsymboling           0\nCarName             0\nfueltype            0\naspiration          0\ndoornumber          0\ncarbody             0\ndrivewheel          0\nenginelocation      0\nwheelbase           0\ncarlength           0\ncarwidth            0\ncarheight           0\ncurbweight          0\nenginetype          0\ncylindernumber      0\nenginesize          0\nfuelsystem          0\nboreratio           0\nstroke              0\ncompressionratio    0\nhorsepower          0\npeakrpm             0\ncitympg             0\nhighwaympg          0\nprice               0\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf.duplicated().any()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndf.describe(include=object)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CarName</th>\n      <th>fueltype</th>\n      <th>aspiration</th>\n      <th>doornumber</th>\n      <th>carbody</th>\n      <th>drivewheel</th>\n      <th>enginelocation</th>\n      <th>enginetype</th>\n      <th>cylindernumber</th>\n      <th>fuelsystem</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>205</td>\n      <td>205</td>\n      <td>205</td>\n      <td>205</td>\n      <td>205</td>\n      <td>205</td>\n      <td>205</td>\n      <td>205</td>\n      <td>205</td>\n      <td>205</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>147</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>3</td>\n      <td>2</td>\n      <td>7</td>\n      <td>7</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>toyota corona</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>fwd</td>\n      <td>front</td>\n      <td>ohc</td>\n      <td>four</td>\n      <td>mpfi</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>6</td>\n      <td>185</td>\n      <td>168</td>\n      <td>115</td>\n      <td>96</td>\n      <td>120</td>\n      <td>202</td>\n      <td>148</td>\n      <td>159</td>\n      <td>94</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndf = df.select_dtypes(include=['float64', 'int64'])\ndf.corr()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>car_ID</th>\n      <th>symboling</th>\n      <th>wheelbase</th>\n      <th>carlength</th>\n      <th>carwidth</th>\n      <th>carheight</th>\n      <th>curbweight</th>\n      <th>enginesize</th>\n      <th>boreratio</th>\n      <th>stroke</th>\n      <th>compressionratio</th>\n      <th>horsepower</th>\n      <th>peakrpm</th>\n      <th>citympg</th>\n      <th>highwaympg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>car_ID</th>\n      <td>1.000000</td>\n      <td>-0.151621</td>\n      <td>0.129729</td>\n      <td>0.170636</td>\n      <td>0.052387</td>\n      <td>0.255960</td>\n      <td>0.071962</td>\n      <td>-0.033930</td>\n      <td>0.260064</td>\n      <td>-0.160824</td>\n      <td>0.150276</td>\n      <td>-0.015006</td>\n      <td>-0.203789</td>\n      <td>0.015940</td>\n      <td>0.011255</td>\n      <td>-0.109093</td>\n    </tr>\n    <tr>\n      <th>symboling</th>\n      <td>-0.151621</td>\n      <td>1.000000</td>\n      <td>-0.531954</td>\n      <td>-0.357612</td>\n      <td>-0.232919</td>\n      <td>-0.541038</td>\n      <td>-0.227691</td>\n      <td>-0.105790</td>\n      <td>-0.130051</td>\n      <td>-0.008735</td>\n      <td>-0.178515</td>\n      <td>0.070873</td>\n      <td>0.273606</td>\n      <td>-0.035823</td>\n      <td>0.034606</td>\n      <td>-0.079978</td>\n    </tr>\n    <tr>\n      <th>wheelbase</th>\n      <td>0.129729</td>\n      <td>-0.531954</td>\n      <td>1.000000</td>\n      <td>0.874587</td>\n      <td>0.795144</td>\n      <td>0.589435</td>\n      <td>0.776386</td>\n      <td>0.569329</td>\n      <td>0.488750</td>\n      <td>0.160959</td>\n      <td>0.249786</td>\n      <td>0.353294</td>\n      <td>-0.360469</td>\n      <td>-0.470414</td>\n      <td>-0.544082</td>\n      <td>0.577816</td>\n    </tr>\n    <tr>\n      <th>carlength</th>\n      <td>0.170636</td>\n      <td>-0.357612</td>\n      <td>0.874587</td>\n      <td>1.000000</td>\n      <td>0.841118</td>\n      <td>0.491029</td>\n      <td>0.877728</td>\n      <td>0.683360</td>\n      <td>0.606454</td>\n      <td>0.129533</td>\n      <td>0.158414</td>\n      <td>0.552623</td>\n      <td>-0.287242</td>\n      <td>-0.670909</td>\n      <td>-0.704662</td>\n      <td>0.682920</td>\n    </tr>\n    <tr>\n      <th>carwidth</th>\n      <td>0.052387</td>\n      <td>-0.232919</td>\n      <td>0.795144</td>\n      <td>0.841118</td>\n      <td>1.000000</td>\n      <td>0.279210</td>\n      <td>0.867032</td>\n      <td>0.735433</td>\n      <td>0.559150</td>\n      <td>0.182942</td>\n      <td>0.181129</td>\n      <td>0.640732</td>\n      <td>-0.220012</td>\n      <td>-0.642704</td>\n      <td>-0.677218</td>\n      <td>0.759325</td>\n    </tr>\n    <tr>\n      <th>carheight</th>\n      <td>0.255960</td>\n      <td>-0.541038</td>\n      <td>0.589435</td>\n      <td>0.491029</td>\n      <td>0.279210</td>\n      <td>1.000000</td>\n      <td>0.295572</td>\n      <td>0.067149</td>\n      <td>0.171071</td>\n      <td>-0.055307</td>\n      <td>0.261214</td>\n      <td>-0.108802</td>\n      <td>-0.320411</td>\n      <td>-0.048640</td>\n      <td>-0.107358</td>\n      <td>0.119336</td>\n    </tr>\n    <tr>\n      <th>curbweight</th>\n      <td>0.071962</td>\n      <td>-0.227691</td>\n      <td>0.776386</td>\n      <td>0.877728</td>\n      <td>0.867032</td>\n      <td>0.295572</td>\n      <td>1.000000</td>\n      <td>0.850594</td>\n      <td>0.648480</td>\n      <td>0.168790</td>\n      <td>0.151362</td>\n      <td>0.750739</td>\n      <td>-0.266243</td>\n      <td>-0.757414</td>\n      <td>-0.797465</td>\n      <td>0.835305</td>\n    </tr>\n    <tr>\n      <th>enginesize</th>\n      <td>-0.033930</td>\n      <td>-0.105790</td>\n      <td>0.569329</td>\n      <td>0.683360</td>\n      <td>0.735433</td>\n      <td>0.067149</td>\n      <td>0.850594</td>\n      <td>1.000000</td>\n      <td>0.583774</td>\n      <td>0.203129</td>\n      <td>0.028971</td>\n      <td>0.809769</td>\n      <td>-0.244660</td>\n      <td>-0.653658</td>\n      <td>-0.677470</td>\n      <td>0.874145</td>\n    </tr>\n    <tr>\n      <th>boreratio</th>\n      <td>0.260064</td>\n      <td>-0.130051</td>\n      <td>0.488750</td>\n      <td>0.606454</td>\n      <td>0.559150</td>\n      <td>0.171071</td>\n      <td>0.648480</td>\n      <td>0.583774</td>\n      <td>1.000000</td>\n      <td>-0.055909</td>\n      <td>0.005197</td>\n      <td>0.573677</td>\n      <td>-0.254976</td>\n      <td>-0.584532</td>\n      <td>-0.587012</td>\n      <td>0.553173</td>\n    </tr>\n    <tr>\n      <th>stroke</th>\n      <td>-0.160824</td>\n      <td>-0.008735</td>\n      <td>0.160959</td>\n      <td>0.129533</td>\n      <td>0.182942</td>\n      <td>-0.055307</td>\n      <td>0.168790</td>\n      <td>0.203129</td>\n      <td>-0.055909</td>\n      <td>1.000000</td>\n      <td>0.186110</td>\n      <td>0.080940</td>\n      <td>-0.067964</td>\n      <td>-0.042145</td>\n      <td>-0.043931</td>\n      <td>0.079443</td>\n    </tr>\n    <tr>\n      <th>compressionratio</th>\n      <td>0.150276</td>\n      <td>-0.178515</td>\n      <td>0.249786</td>\n      <td>0.158414</td>\n      <td>0.181129</td>\n      <td>0.261214</td>\n      <td>0.151362</td>\n      <td>0.028971</td>\n      <td>0.005197</td>\n      <td>0.186110</td>\n      <td>1.000000</td>\n      <td>-0.204326</td>\n      <td>-0.435741</td>\n      <td>0.324701</td>\n      <td>0.265201</td>\n      <td>0.067984</td>\n    </tr>\n    <tr>\n      <th>horsepower</th>\n      <td>-0.015006</td>\n      <td>0.070873</td>\n      <td>0.353294</td>\n      <td>0.552623</td>\n      <td>0.640732</td>\n      <td>-0.108802</td>\n      <td>0.750739</td>\n      <td>0.809769</td>\n      <td>0.573677</td>\n      <td>0.080940</td>\n      <td>-0.204326</td>\n      <td>1.000000</td>\n      <td>0.131073</td>\n      <td>-0.801456</td>\n      <td>-0.770544</td>\n      <td>0.808139</td>\n    </tr>\n    <tr>\n      <th>peakrpm</th>\n      <td>-0.203789</td>\n      <td>0.273606</td>\n      <td>-0.360469</td>\n      <td>-0.287242</td>\n      <td>-0.220012</td>\n      <td>-0.320411</td>\n      <td>-0.266243</td>\n      <td>-0.244660</td>\n      <td>-0.254976</td>\n      <td>-0.067964</td>\n      <td>-0.435741</td>\n      <td>0.131073</td>\n      <td>1.000000</td>\n      <td>-0.113544</td>\n      <td>-0.054275</td>\n      <td>-0.085267</td>\n    </tr>\n    <tr>\n      <th>citympg</th>\n      <td>0.015940</td>\n      <td>-0.035823</td>\n      <td>-0.470414</td>\n      <td>-0.670909</td>\n      <td>-0.642704</td>\n      <td>-0.048640</td>\n      <td>-0.757414</td>\n      <td>-0.653658</td>\n      <td>-0.584532</td>\n      <td>-0.042145</td>\n      <td>0.324701</td>\n      <td>-0.801456</td>\n      <td>-0.113544</td>\n      <td>1.000000</td>\n      <td>0.971337</td>\n      <td>-0.685751</td>\n    </tr>\n    <tr>\n      <th>highwaympg</th>\n      <td>0.011255</td>\n      <td>0.034606</td>\n      <td>-0.544082</td>\n      <td>-0.704662</td>\n      <td>-0.677218</td>\n      <td>-0.107358</td>\n      <td>-0.797465</td>\n      <td>-0.677470</td>\n      <td>-0.587012</td>\n      <td>-0.043931</td>\n      <td>0.265201</td>\n      <td>-0.770544</td>\n      <td>-0.054275</td>\n      <td>0.971337</td>\n      <td>1.000000</td>\n      <td>-0.697599</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>-0.109093</td>\n      <td>-0.079978</td>\n      <td>0.577816</td>\n      <td>0.682920</td>\n      <td>0.759325</td>\n      <td>0.119336</td>\n      <td>0.835305</td>\n      <td>0.874145</td>\n      <td>0.553173</td>\n      <td>0.079443</td>\n      <td>0.067984</td>\n      <td>0.808139</td>\n      <td>-0.085267</td>\n      <td>-0.685751</td>\n      <td>-0.697599</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ncorrelation_matrix = df[['carlength', 'carwidth', 'curbweight']].corr()\nplt.figure(figsize=(8, 6))\nsns.heatmap(correlation_matrix,  cmap='coolwarm', center=0)\nfor i in range(len(correlation_matrix)):\n    for j in range(len(correlation_matrix)):\n        plt.text(j + 0.5, i + 0.5, f\"{correlation_matrix.iloc[i, j]:.2f}\", ha='center', va='center', fontsize=10)\nplt.title('Correlation Matrix')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=609 height=505}\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndf = df.drop(['symboling', 'car_ID', ], axis=1)\nprint(df.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   wheelbase  carlength  carwidth  carheight  curbweight  enginesize  \\\n0       88.6      168.8      64.1       48.8        2548         130   \n1       88.6      168.8      64.1       48.8        2548         130   \n2       94.5      171.2      65.5       52.4        2823         152   \n3       99.8      176.6      66.2       54.3        2337         109   \n4       99.4      176.6      66.4       54.3        2824         136   \n\n   boreratio  stroke  compressionratio  horsepower  peakrpm  citympg  \\\n0       3.47    2.68               9.0         111     5000       21   \n1       3.47    2.68               9.0         111     5000       21   \n2       2.68    3.47               9.0         154     5000       19   \n3       3.19    3.40              10.0         102     5500       24   \n4       3.19    3.40               8.0         115     5500       18   \n\n   highwaympg    price  \n0          27  13495.0  \n1          27  16500.0  \n2          26  16500.0  \n3          30  13950.0  \n4          22  17450.0  \n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n(205, 14)\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nIndex(['wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight',\n       'enginesize', 'boreratio', 'stroke', 'compressionratio', 'horsepower',\n       'peakrpm', 'citympg', 'highwaympg', 'price'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nX = df.drop('price', axis=1)\ny = df['price']\n```\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nX.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>wheelbase</th>\n      <th>carlength</th>\n      <th>carwidth</th>\n      <th>carheight</th>\n      <th>curbweight</th>\n      <th>enginesize</th>\n      <th>boreratio</th>\n      <th>stroke</th>\n      <th>compressionratio</th>\n      <th>horsepower</th>\n      <th>peakrpm</th>\n      <th>citympg</th>\n      <th>highwaympg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>88.6</td>\n      <td>168.8</td>\n      <td>64.1</td>\n      <td>48.8</td>\n      <td>2548</td>\n      <td>130</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>88.6</td>\n      <td>168.8</td>\n      <td>64.1</td>\n      <td>48.8</td>\n      <td>2548</td>\n      <td>130</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>94.5</td>\n      <td>171.2</td>\n      <td>65.5</td>\n      <td>52.4</td>\n      <td>2823</td>\n      <td>152</td>\n      <td>2.68</td>\n      <td>3.47</td>\n      <td>9.0</td>\n      <td>154</td>\n      <td>5000</td>\n      <td>19</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>99.8</td>\n      <td>176.6</td>\n      <td>66.2</td>\n      <td>54.3</td>\n      <td>2337</td>\n      <td>109</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>10.0</td>\n      <td>102</td>\n      <td>5500</td>\n      <td>24</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>99.4</td>\n      <td>176.6</td>\n      <td>66.4</td>\n      <td>54.3</td>\n      <td>2824</td>\n      <td>136</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>8.0</td>\n      <td>115</td>\n      <td>5500</td>\n      <td>18</td>\n      <td>22</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n0      13495.0\n1      16500.0\n2      16500.0\n3      13950.0\n4      17450.0\n        ...   \n200    16845.0\n201    19045.0\n202    21485.0\n203    22470.0\n204    22625.0\nName: price, Length: 205, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.heatmap(df.corr(), cmap='coolwarm', fmt=\".2f\", linewidths=.5)\nfor i in range(len(df.corr())):\n    for j in range(len(df.corr())):\n        plt.text(j + 0.5, i + 0.5, f\"{df.corr().iloc[i, j]:.2f}\", ha='center', va='center', fontsize=10)\nplt.title('Correlation Heatmap')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-1.png){width=722 height=607}\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nsns.pairplot(df)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-22-output-1.png){width=3298 height=3299}\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.histplot(df['enginesize'], kde=True, color='skyblue')\nplt.title('Distribution of Engine Size')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-23-output-1.png){width=659 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.histplot(df['wheelbase'], kde=True)\nplt.title('Distribution of Wheelbase')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-1.png){width=659 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.histplot(df['carlength'], kde=True)\nplt.title('Distribution of Car Length')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-25-output-1.png){width=660 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.histplot(df['carlength'], kde=True)\nplt.title('Distribution of Car Length')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-26-output-1.png){width=660 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.histplot(df['carheight'], kde=True)\nplt.title('Distribution of Car Height')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-27-output-1.png){width=659 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.histplot(df['curbweight'], kde=True)\nplt.title('Distribution of Curb Weight')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-28-output-1.png){width=659 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nplt.scatter(df['enginesize'], df['price'])\nplt.xlabel('Engine Size')\nplt.ylabel('Price')\nplt.title('Scatter Plot between Engine Size and Price')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-29-output-1.png){width=610 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nsns.scatterplot(x='horsepower', y='price', data=df)\nplt.title('Horsepower vs. Price (Scatter Plot)')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-30-output-1.png){width=623 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nsns.histplot(df['price'], kde=True, color='skyblue')\nplt.title('Distribution of Car Prices with KDE')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-31-output-1.png){width=585 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nsns.histplot(df['citympg'], kde=True, bins=20, color='skyblue')\nplt.title('Distribution of City MPG')\nplt.xlabel('City MPG')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-32-output-1.png){width=585 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)\n```\n:::\n\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nsns.regplot(x='wheelbase', y='price', data=df, scatter_kws={'s': 20}, line_kws={'color': 'red'})\nplt.title('Wheelbase vs. Price')\nplt.xlabel('Wheelbase')\nplt.ylabel('Price')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-34-output-1.png){width=610 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nsns.regplot(x='carlength', y='price', data=df, scatter_kws={'s': 20}, line_kws={'color': 'red'})\nplt.title('Car Length vs. Price')\nplt.xlabel('Car Length')\nplt.ylabel('Price')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-35-output-1.png){width=612 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nsns.regplot(x='curbweight', y='price', data=df, scatter_kws={'s': 20}, line_kws={'color': 'red'})\nplt.title('Curb Weight vs. Price')\nplt.xlabel('Curb Weight')\nplt.ylabel('Price')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-36-output-1.png){width=610 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nsns.regplot(x='enginesize', y='price', data=df, scatter_kws={'s': 20}, line_kws={'color': 'red'})\nplt.title('Engine Size vs. Price')\nplt.xlabel('Engine Size')\nplt.ylabel('Price')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-37-output-1.png){width=610 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nsns.regplot(x='horsepower', y='price', data=df, scatter_kws={'s': 20}, line_kws={'color': 'red'})\nplt.title('Horsepower vs. Price')\nplt.xlabel('Horsepower')\nplt.ylabel('Price')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-38-output-1.png){width=623 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nsns.regplot(x='citympg', y='price', data=df, scatter_kws={'s': 20}, line_kws={'color': 'red'})\nplt.title('City MPG vs. Price')\nplt.xlabel('City MPG')\nplt.ylabel('Price')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-39-output-1.png){width=621 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nprint(X_train.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight',\n       'enginesize', 'boreratio', 'stroke', 'compressionratio', 'horsepower',\n       'peakrpm', 'citympg', 'highwaympg'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nimport pandas as pd\ncategorical_cols = ['enginesize', 'horsepower', 'peakrpm']\nX_train_encoded = pd.get_dummies(X_train, columns=categorical_cols)\nX_test_encoded = pd.get_dummies(X_test, columns=categorical_cols)\n```\n:::\n\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nfor column in X_train.columns:\n    unique_values = X_train[column].nunique()\n    print(f\"Column '{column}' has {unique_values} unique values.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumn 'wheelbase' has 46 unique values.\nColumn 'carlength' has 63 unique values.\nColumn 'carwidth' has 41 unique values.\nColumn 'carheight' has 47 unique values.\nColumn 'curbweight' has 132 unique values.\nColumn 'enginesize' has 41 unique values.\nColumn 'boreratio' has 36 unique values.\nColumn 'stroke' has 35 unique values.\nColumn 'compressionratio' has 30 unique values.\nColumn 'horsepower' has 53 unique values.\nColumn 'peakrpm' has 23 unique values.\nColumn 'citympg' has 27 unique values.\nColumn 'highwaympg' has 28 unique values.\n```\n:::\n:::\n\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\nregression=LinearRegression()\n```\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nfor col in categorical_cols:\n    print(f\"Unique values in '{col}': {X_train[col].unique()}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnique values in 'enginesize': [103 122  97 136 146  70 194  92 108 181 140 110 164 151  98 121  91 120\n 156  90 141 134 152 119 130  79 109 183 145 258 111 326 161 131 132 209\n 234 171  80 203 304]\nUnique values in 'horsepower': [ 55  92  69 110 116 101 207  68  82 160 175  73  76 121 143 100  70  95\n 112 145 102 114 142 154  90  88  84 162 115  60  97  62 111  52  85 123\n 106  86 176  56  78 200 262 156 140 182 155  64 135 288 152 184 161]\nUnique values in 'peakrpm': [4800 4200 5200 5500 6000 5900 5000 4500 4250 4400 6600 5800 5400 5600\n 4900 4150 5250 5100 4350 4750 4650 5300 5750]\n```\n:::\n:::\n\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nprint(X_train.dtypes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nwheelbase           float64\ncarlength           float64\ncarwidth            float64\ncarheight           float64\ncurbweight            int64\nenginesize            int64\nboreratio           float64\nstroke              float64\ncompressionratio    float64\nhorsepower            int64\npeakrpm               int64\ncitympg               int64\nhighwaympg            int64\ndtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nX_train_encoded = pd.get_dummies(X_train, columns=categorical_cols)\n```\n:::\n\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nX_train_encoded = pd.get_dummies(X_train, columns=categorical_cols)\nX_test_encoded = pd.get_dummies(X_test, columns=categorical_cols)\n```\n:::\n\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nnon_numeric_cols_train = X_train_encoded.select_dtypes(exclude=['float64', 'int64']).columns\nnon_numeric_cols_test = X_test_encoded.select_dtypes(exclude=['float64', 'int64']).columns\nprint(\"Non-numeric columns in X_train_encoded:\", non_numeric_cols_train)\nprint(\"Non-numeric columns in X_test_encoded:\", non_numeric_cols_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNon-numeric columns in X_train_encoded: Index(['enginesize_70', 'enginesize_79', 'enginesize_80', 'enginesize_90',\n       'enginesize_91', 'enginesize_92', 'enginesize_97', 'enginesize_98',\n       'enginesize_103', 'enginesize_108',\n       ...\n       'peakrpm_5250', 'peakrpm_5300', 'peakrpm_5400', 'peakrpm_5500',\n       'peakrpm_5600', 'peakrpm_5750', 'peakrpm_5800', 'peakrpm_5900',\n       'peakrpm_6000', 'peakrpm_6600'],\n      dtype='object', length=117)\nNon-numeric columns in X_test_encoded: Index(['enginesize_61', 'enginesize_70', 'enginesize_90', 'enginesize_92',\n       'enginesize_97', 'enginesize_98', 'enginesize_108', 'enginesize_110',\n       'enginesize_120', 'enginesize_121', 'enginesize_122', 'enginesize_131',\n       'enginesize_134', 'enginesize_136', 'enginesize_140', 'enginesize_141',\n       'enginesize_146', 'enginesize_152', 'enginesize_156', 'enginesize_171',\n       'enginesize_173', 'enginesize_181', 'enginesize_183', 'enginesize_209',\n       'enginesize_308', 'horsepower_48', 'horsepower_52', 'horsepower_56',\n       'horsepower_58', 'horsepower_62', 'horsepower_68', 'horsepower_69',\n       'horsepower_70', 'horsepower_72', 'horsepower_73', 'horsepower_82',\n       'horsepower_84', 'horsepower_86', 'horsepower_88', 'horsepower_92',\n       'horsepower_94', 'horsepower_95', 'horsepower_97', 'horsepower_101',\n       'horsepower_102', 'horsepower_110', 'horsepower_111', 'horsepower_114',\n       'horsepower_116', 'horsepower_120', 'horsepower_123', 'horsepower_134',\n       'horsepower_145', 'horsepower_152', 'horsepower_160', 'horsepower_161',\n       'horsepower_182', 'horsepower_184', 'peakrpm_4150', 'peakrpm_4200',\n       'peakrpm_4350', 'peakrpm_4400', 'peakrpm_4500', 'peakrpm_4800',\n       'peakrpm_5000', 'peakrpm_5100', 'peakrpm_5200', 'peakrpm_5250',\n       'peakrpm_5400', 'peakrpm_5500', 'peakrpm_5800', 'peakrpm_6000'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder_train = LabelEncoder()\nfor col in non_numeric_cols_train:\n    X_train_encoded[col] = label_encoder_train.fit_transform(X_train_encoded[col])\n\nlabel_encoder_test = LabelEncoder()\nfor col in non_numeric_cols_test:\n    X_test_encoded[col] = label_encoder_test.fit_transform(X_test_encoded[col])\n```\n:::\n\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nfor col in non_numeric_cols_train:\n    print(f\"Unique values in {col}: {X_train_encoded[col].unique()}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnique values in enginesize_70: [0 1]\nUnique values in enginesize_79: [0 1]\nUnique values in enginesize_80: [0 1]\nUnique values in enginesize_90: [0 1]\nUnique values in enginesize_91: [0 1]\nUnique values in enginesize_92: [0 1]\nUnique values in enginesize_97: [0 1]\nUnique values in enginesize_98: [0 1]\nUnique values in enginesize_103: [1 0]\nUnique values in enginesize_108: [0 1]\nUnique values in enginesize_109: [0 1]\nUnique values in enginesize_110: [0 1]\nUnique values in enginesize_111: [0 1]\nUnique values in enginesize_119: [0 1]\nUnique values in enginesize_120: [0 1]\nUnique values in enginesize_121: [0 1]\nUnique values in enginesize_122: [0 1]\nUnique values in enginesize_130: [0 1]\nUnique values in enginesize_131: [0 1]\nUnique values in enginesize_132: [0 1]\nUnique values in enginesize_134: [0 1]\nUnique values in enginesize_136: [0 1]\nUnique values in enginesize_140: [0 1]\nUnique values in enginesize_141: [0 1]\nUnique values in enginesize_145: [0 1]\nUnique values in enginesize_146: [0 1]\nUnique values in enginesize_151: [0 1]\nUnique values in enginesize_152: [0 1]\nUnique values in enginesize_156: [0 1]\nUnique values in enginesize_161: [0 1]\nUnique values in enginesize_164: [0 1]\nUnique values in enginesize_171: [0 1]\nUnique values in enginesize_181: [0 1]\nUnique values in enginesize_183: [0 1]\nUnique values in enginesize_194: [0 1]\nUnique values in enginesize_203: [0 1]\nUnique values in enginesize_209: [0 1]\nUnique values in enginesize_234: [0 1]\nUnique values in enginesize_258: [0 1]\nUnique values in enginesize_304: [0 1]\nUnique values in enginesize_326: [0 1]\nUnique values in horsepower_52: [0 1]\nUnique values in horsepower_55: [1 0]\nUnique values in horsepower_56: [0 1]\nUnique values in horsepower_60: [0 1]\nUnique values in horsepower_62: [0 1]\nUnique values in horsepower_64: [0 1]\nUnique values in horsepower_68: [0 1]\nUnique values in horsepower_69: [0 1]\nUnique values in horsepower_70: [0 1]\nUnique values in horsepower_73: [0 1]\nUnique values in horsepower_76: [0 1]\nUnique values in horsepower_78: [0 1]\nUnique values in horsepower_82: [0 1]\nUnique values in horsepower_84: [0 1]\nUnique values in horsepower_85: [0 1]\nUnique values in horsepower_86: [0 1]\nUnique values in horsepower_88: [0 1]\nUnique values in horsepower_90: [0 1]\nUnique values in horsepower_92: [0 1]\nUnique values in horsepower_95: [0 1]\nUnique values in horsepower_97: [0 1]\nUnique values in horsepower_100: [0 1]\nUnique values in horsepower_101: [0 1]\nUnique values in horsepower_102: [0 1]\nUnique values in horsepower_106: [0 1]\nUnique values in horsepower_110: [0 1]\nUnique values in horsepower_111: [0 1]\nUnique values in horsepower_112: [0 1]\nUnique values in horsepower_114: [0 1]\nUnique values in horsepower_115: [0 1]\nUnique values in horsepower_116: [0 1]\nUnique values in horsepower_121: [0 1]\nUnique values in horsepower_123: [0 1]\nUnique values in horsepower_135: [0 1]\nUnique values in horsepower_140: [0 1]\nUnique values in horsepower_142: [0 1]\nUnique values in horsepower_143: [0 1]\nUnique values in horsepower_145: [0 1]\nUnique values in horsepower_152: [0 1]\nUnique values in horsepower_154: [0 1]\nUnique values in horsepower_155: [0 1]\nUnique values in horsepower_156: [0 1]\nUnique values in horsepower_160: [0 1]\nUnique values in horsepower_161: [0 1]\nUnique values in horsepower_162: [0 1]\nUnique values in horsepower_175: [0 1]\nUnique values in horsepower_176: [0 1]\nUnique values in horsepower_182: [0 1]\nUnique values in horsepower_184: [0 1]\nUnique values in horsepower_200: [0 1]\nUnique values in horsepower_207: [0 1]\nUnique values in horsepower_262: [0 1]\nUnique values in horsepower_288: [0 1]\nUnique values in peakrpm_4150: [0 1]\nUnique values in peakrpm_4200: [0 1]\nUnique values in peakrpm_4250: [0 1]\nUnique values in peakrpm_4350: [0 1]\nUnique values in peakrpm_4400: [0 1]\nUnique values in peakrpm_4500: [0 1]\nUnique values in peakrpm_4650: [0 1]\nUnique values in peakrpm_4750: [0 1]\nUnique values in peakrpm_4800: [1 0]\nUnique values in peakrpm_4900: [0 1]\nUnique values in peakrpm_5000: [0 1]\nUnique values in peakrpm_5100: [0 1]\nUnique values in peakrpm_5200: [0 1]\nUnique values in peakrpm_5250: [0 1]\nUnique values in peakrpm_5300: [0 1]\nUnique values in peakrpm_5400: [0 1]\nUnique values in peakrpm_5500: [0 1]\nUnique values in peakrpm_5600: [0 1]\nUnique values in peakrpm_5750: [0 1]\nUnique values in peakrpm_5800: [0 1]\nUnique values in peakrpm_5900: [0 1]\nUnique values in peakrpm_6000: [0 1]\nUnique values in peakrpm_6600: [0 1]\n```\n:::\n:::\n\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nfor col in non_numeric_cols_test:\n    print(f\"Unique values in {col}: {X_test_encoded[col].unique()}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnique values in enginesize_61: [0 1]\nUnique values in enginesize_70: [0 1]\nUnique values in enginesize_90: [0 1]\nUnique values in enginesize_92: [0 1]\nUnique values in enginesize_97: [0 1]\nUnique values in enginesize_98: [0 1]\nUnique values in enginesize_108: [0 1]\nUnique values in enginesize_110: [0 1]\nUnique values in enginesize_120: [0 1]\nUnique values in enginesize_121: [0 1]\nUnique values in enginesize_122: [0 1]\nUnique values in enginesize_131: [0 1]\nUnique values in enginesize_134: [0 1]\nUnique values in enginesize_136: [0 1]\nUnique values in enginesize_140: [0 1]\nUnique values in enginesize_141: [0 1]\nUnique values in enginesize_146: [0 1]\nUnique values in enginesize_152: [0 1]\nUnique values in enginesize_156: [0 1]\nUnique values in enginesize_171: [0 1]\nUnique values in enginesize_173: [0 1]\nUnique values in enginesize_181: [0 1]\nUnique values in enginesize_183: [0 1]\nUnique values in enginesize_209: [1 0]\nUnique values in enginesize_308: [0 1]\nUnique values in horsepower_48: [0 1]\nUnique values in horsepower_52: [0 1]\nUnique values in horsepower_56: [0 1]\nUnique values in horsepower_58: [0 1]\nUnique values in horsepower_62: [0 1]\nUnique values in horsepower_68: [0 1]\nUnique values in horsepower_69: [0 1]\nUnique values in horsepower_70: [0 1]\nUnique values in horsepower_72: [0 1]\nUnique values in horsepower_73: [0 1]\nUnique values in horsepower_82: [0 1]\nUnique values in horsepower_84: [0 1]\nUnique values in horsepower_86: [0 1]\nUnique values in horsepower_88: [0 1]\nUnique values in horsepower_92: [0 1]\nUnique values in horsepower_94: [0 1]\nUnique values in horsepower_95: [0 1]\nUnique values in horsepower_97: [0 1]\nUnique values in horsepower_101: [0 1]\nUnique values in horsepower_102: [0 1]\nUnique values in horsepower_110: [0 1]\nUnique values in horsepower_111: [0 1]\nUnique values in horsepower_114: [0 1]\nUnique values in horsepower_116: [0 1]\nUnique values in horsepower_120: [0 1]\nUnique values in horsepower_123: [0 1]\nUnique values in horsepower_134: [0 1]\nUnique values in horsepower_145: [0 1]\nUnique values in horsepower_152: [0 1]\nUnique values in horsepower_160: [0 1]\nUnique values in horsepower_161: [0 1]\nUnique values in horsepower_182: [1 0]\nUnique values in horsepower_184: [0 1]\nUnique values in peakrpm_4150: [0 1]\nUnique values in peakrpm_4200: [0 1]\nUnique values in peakrpm_4350: [0 1]\nUnique values in peakrpm_4400: [0 1]\nUnique values in peakrpm_4500: [0 1]\nUnique values in peakrpm_4800: [0 1]\nUnique values in peakrpm_5000: [0 1]\nUnique values in peakrpm_5100: [0 1]\nUnique values in peakrpm_5200: [0 1]\nUnique values in peakrpm_5250: [0 1]\nUnique values in peakrpm_5400: [1 0]\nUnique values in peakrpm_5500: [0 1]\nUnique values in peakrpm_5800: [0 1]\nUnique values in peakrpm_6000: [0 1]\n```\n:::\n:::\n\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nlabel_encoder = LabelEncoder()\n\nfor col in categorical_cols:\n    X_train[col] = label_encoder.fit_transform(X_train[col])\n\nonehot_encoder = OneHotEncoder(drop='first', sparse=False)\n\nX_train_encoded = pd.get_dummies(X_train, columns=categorical_cols, drop_first=True)\nX_test_encoded = pd.get_dummies(X_test, columns=categorical_cols, drop_first=True)\n\nX_train_encoded, X_test_encoded = X_train_encoded.align(X_test_encoded, join='outer', axis=1, fill_value=0)\n\nregression.fit(X_train_encoded, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```{=html}\n<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nfrom sklearn.model_selection import cross_val_score\nvalidation_score=cross_val_score(regression,X_train,y_train,scoring='neg_mean_squared_error',\n                             cv=3)\n```\n:::\n\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\nnp.mean(validation_score)\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n-17619779.964257453\n```\n:::\n:::\n\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\ny_pred = regression.predict(X_test_encoded)\ny_pred\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\narray([ 17663.40920114,   2843.49700864,   -681.0197125 ,  20031.97260338,\n        23256.22526061,  -2078.06829731,  11404.65164046,   8303.95517846,\n        34989.85861164,  -1974.8074486 ,    672.29083674,   7942.30385746,\n        26485.26793673,  -1324.44214526,  31219.07729321,   3691.87875078,\n        -5254.23835884,   -389.77808369,   1982.84977136,  34302.79230783,\n         4217.87918551,  15554.97366416,  -1635.32099728, -14421.58919858,\n        -3894.410904  ,  18993.50244592,  10010.82968533,  28157.3938917 ,\n        -2754.23702629,  27383.42715415,  21693.84435239,  -4089.13068506,\n         3223.28302425,  32429.56926617,  -6839.56578167,  21720.24707413,\n        34377.53936716,   9197.98033432,    136.89843489,    723.50606337,\n        32982.56263849,  11575.29609297,  49483.4797775 ,   3077.1128973 ,\n        -2818.66172925,  -8107.23857484,  -4089.13068506,  32626.79986009,\n        25793.48112021,  -1219.70262027,   -172.88303499,   8578.30732609])\n```\n:::\n:::\n\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nmse=mean_squared_error(y_test,y_pred)\nmae=mean_absolute_error(y_test,y_pred)\nrmse=np.sqrt(mse)\nprint(mse)\nprint(mae)\nprint(rmse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n177304634.11961922\n11133.618219594775\n13315.57862503989\n```\n:::\n:::\n\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test,y_pred)\nprint(score)\nprint(1 - (1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-1.6205416455966546\n-2.51704273487972\n```\n:::\n:::\n\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\nplt.scatter(y_test,y_pred)\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n<matplotlib.collections.PathCollection at 0x276300a7c50>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-58-output-2.png){width=603 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=58}\n``` {.python .cell-code}\nresiduals=y_test-y_pred\nprint(residuals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n15     13096.590799\n9      15015.669991\n100    10230.019713\n132    -8181.972603\n68      4991.774739\n95      9877.068297\n159    -3616.651640\n162      954.044822\n147   -24791.858612\n182     9749.807449\n191    12622.709163\n164      295.696143\n65     -8205.267937\n175    11312.442145\n73      9740.922707\n152     2796.121249\n18     10405.238359\n82     13018.778084\n86      6206.150229\n143   -24342.792308\n60      4277.120814\n101    -2055.973664\n98      9884.320997\n30     20900.589199\n25     10586.410904\n16     22321.497554\n168     -371.829685\n195   -14742.393892\n97     10753.237026\n194   -14443.427154\n67      3858.155648\n120    10318.130685\n154     4674.716976\n202   -10944.569266\n79     14528.565782\n69      6455.752926\n145   -23118.539367\n55      1747.019666\n45      8779.601565\n84     13765.493937\n146   -25519.562638\n66      6768.703907\n111   -33903.479777\n153     3840.887103\n96     10317.661729\n38     17202.238575\n24     10318.130685\n139   -25573.799860\n112    -8893.481120\n29     14183.702620\n19      6467.883035\n178     7979.692674\nName: price, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\nsns.displot(residuals,kind='kde')\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-60-output-1.png){width=471 height=470}\n:::\n:::\n\n\n::: {.cell execution_count=60}\n``` {.python .cell-code}\nplt.scatter(y_pred,residuals)\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\n<matplotlib.collections.PathCollection at 0x27635afdcd0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-61-output-2.png){width=604 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=61}\n``` {.python .cell-code}\nsns.histplot(y_pred, kde=True, color='skyblue')\nplt.title('Distribution of Predicted Prices')\nplt.xlabel('Predicted Prices')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-62-output-1.png){width=586 height=449}\n:::\n:::\n\n\n```{=html}\n<h3 >3.b)Non-Linear Regression</h3>\n    <h3>What is a Non-Linear Regression?</h3>\n    <p>One kind of polynomial regression is non-linear regression. A non-linear relationship between the dependent and independent variables can be modeled using this technique. When the data exhibits a curved trend and non-linear regression yields more accurate results than linear regression, it is used instead of linear regression. This is because the assumption behind linear regression is that the data is linear. </p>\n    <h3>How does a Non-Linear Regression work?</h3>\n    <p>When we pay close attention, we will see that non-linear regression is the next step up from linear regression. All that needs to be done is add the dependent features' higher-order terms to the feature space. Though not precisely, feature engineering is another name for this at times.</p>\n    <h3>Applications of Non-Linear Regression</h3>\n    <p> that non-linear regression techniques are superior to linear regression techniques because most real-world data is non-linear. Non-linear regression methods aid in the creation of a solid model whose forecasts are trustworthy and consistent with the historical trend observed in the data. Non-Linear Regression techniques successfully completed tasks related to logistic pricing model, financial forecasting, and exponential growth or decay of a population.</p>\n```\n\n::: {.cell execution_count=62}\n``` {.python .cell-code}\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nimport warnings\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings('ignore')\n```\n:::\n\n\n::: {.cell execution_count=63}\n``` {.python .cell-code}\ndf = pd.read_csv('miami-housing.csv')\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LATITUDE</th>\n      <th>LONGITUDE</th>\n      <th>PARCELNO</th>\n      <th>SALE_PRC</th>\n      <th>LND_SQFOOT</th>\n      <th>TOT_LVG_AREA</th>\n      <th>SPEC_FEAT_VAL</th>\n      <th>RAIL_DIST</th>\n      <th>OCEAN_DIST</th>\n      <th>WATER_DIST</th>\n      <th>CNTR_DIST</th>\n      <th>SUBCNTR_DI</th>\n      <th>HWY_DIST</th>\n      <th>age</th>\n      <th>avno60plus</th>\n      <th>month_sold</th>\n      <th>structure_quality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>25.891031</td>\n      <td>-80.160561</td>\n      <td>622280070620</td>\n      <td>440000.0</td>\n      <td>9375</td>\n      <td>1753</td>\n      <td>0</td>\n      <td>2815.9</td>\n      <td>12811.4</td>\n      <td>347.6</td>\n      <td>42815.3</td>\n      <td>37742.2</td>\n      <td>15954.9</td>\n      <td>67</td>\n      <td>0</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>25.891324</td>\n      <td>-80.153968</td>\n      <td>622280100460</td>\n      <td>349000.0</td>\n      <td>9375</td>\n      <td>1715</td>\n      <td>0</td>\n      <td>4359.1</td>\n      <td>10648.4</td>\n      <td>337.8</td>\n      <td>43504.9</td>\n      <td>37340.5</td>\n      <td>18125.0</td>\n      <td>63</td>\n      <td>0</td>\n      <td>9</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>25.891334</td>\n      <td>-80.153740</td>\n      <td>622280100470</td>\n      <td>800000.0</td>\n      <td>9375</td>\n      <td>2276</td>\n      <td>49206</td>\n      <td>4412.9</td>\n      <td>10574.1</td>\n      <td>297.1</td>\n      <td>43530.4</td>\n      <td>37328.7</td>\n      <td>18200.5</td>\n      <td>61</td>\n      <td>0</td>\n      <td>2</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>25.891765</td>\n      <td>-80.152657</td>\n      <td>622280100530</td>\n      <td>988000.0</td>\n      <td>12450</td>\n      <td>2058</td>\n      <td>10033</td>\n      <td>4585.0</td>\n      <td>10156.5</td>\n      <td>0.0</td>\n      <td>43797.5</td>\n      <td>37423.2</td>\n      <td>18514.4</td>\n      <td>63</td>\n      <td>0</td>\n      <td>9</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>25.891825</td>\n      <td>-80.154639</td>\n      <td>622280100200</td>\n      <td>755000.0</td>\n      <td>12800</td>\n      <td>1684</td>\n      <td>16681</td>\n      <td>4063.4</td>\n      <td>10836.8</td>\n      <td>326.6</td>\n      <td>43599.7</td>\n      <td>37550.8</td>\n      <td>17903.4</td>\n      <td>42</td>\n      <td>0</td>\n      <td>7</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=64}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\nIndex(['LATITUDE', 'LONGITUDE', 'PARCELNO', 'SALE_PRC', 'LND_SQFOOT',\n       'TOT_LVG_AREA', 'SPEC_FEAT_VAL', 'RAIL_DIST', 'OCEAN_DIST',\n       'WATER_DIST', 'CNTR_DIST', 'SUBCNTR_DI', 'HWY_DIST', 'age',\n       'avno60plus', 'month_sold', 'structure_quality'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=65}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 13932 entries, 0 to 13931\nData columns (total 17 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   LATITUDE           13932 non-null  float64\n 1   LONGITUDE          13932 non-null  float64\n 2   PARCELNO           13932 non-null  int64  \n 3   SALE_PRC           13932 non-null  float64\n 4   LND_SQFOOT         13932 non-null  int64  \n 5   TOT_LVG_AREA       13932 non-null  int64  \n 6   SPEC_FEAT_VAL      13932 non-null  int64  \n 7   RAIL_DIST          13932 non-null  float64\n 8   OCEAN_DIST         13932 non-null  float64\n 9   WATER_DIST         13932 non-null  float64\n 10  CNTR_DIST          13932 non-null  float64\n 11  SUBCNTR_DI         13932 non-null  float64\n 12  HWY_DIST           13932 non-null  float64\n 13  age                13932 non-null  int64  \n 14  avno60plus         13932 non-null  int64  \n 15  month_sold         13932 non-null  int64  \n 16  structure_quality  13932 non-null  int64  \ndtypes: float64(9), int64(8)\nmemory usage: 1.8 MB\n```\n:::\n:::\n\n\n::: {.cell execution_count=66}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LATITUDE</th>\n      <th>LONGITUDE</th>\n      <th>PARCELNO</th>\n      <th>SALE_PRC</th>\n      <th>LND_SQFOOT</th>\n      <th>TOT_LVG_AREA</th>\n      <th>SPEC_FEAT_VAL</th>\n      <th>RAIL_DIST</th>\n      <th>OCEAN_DIST</th>\n      <th>WATER_DIST</th>\n      <th>CNTR_DIST</th>\n      <th>SUBCNTR_DI</th>\n      <th>HWY_DIST</th>\n      <th>age</th>\n      <th>avno60plus</th>\n      <th>month_sold</th>\n      <th>structure_quality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n      <td>1.393200e+04</td>\n      <td>1.393200e+04</td>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n      <td>13932.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>25.728811</td>\n      <td>-80.327475</td>\n      <td>2.356496e+12</td>\n      <td>3.999419e+05</td>\n      <td>8620.879917</td>\n      <td>2058.044574</td>\n      <td>9562.493468</td>\n      <td>8348.548715</td>\n      <td>31690.993798</td>\n      <td>11960.285235</td>\n      <td>68490.327132</td>\n      <td>41115.047265</td>\n      <td>7723.770693</td>\n      <td>30.669251</td>\n      <td>0.014930</td>\n      <td>6.655828</td>\n      <td>3.513997</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.140633</td>\n      <td>0.089199</td>\n      <td>1.199290e+12</td>\n      <td>3.172147e+05</td>\n      <td>6070.088742</td>\n      <td>813.538535</td>\n      <td>13890.967782</td>\n      <td>6178.027333</td>\n      <td>17595.079468</td>\n      <td>11932.992369</td>\n      <td>32008.474808</td>\n      <td>22161.825935</td>\n      <td>6068.936108</td>\n      <td>21.153068</td>\n      <td>0.121276</td>\n      <td>3.301523</td>\n      <td>1.097444</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>25.434333</td>\n      <td>-80.542172</td>\n      <td>1.020008e+11</td>\n      <td>7.200000e+04</td>\n      <td>1248.000000</td>\n      <td>854.000000</td>\n      <td>0.000000</td>\n      <td>10.500000</td>\n      <td>236.100000</td>\n      <td>0.000000</td>\n      <td>3825.600000</td>\n      <td>1462.800000</td>\n      <td>90.200000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>25.620056</td>\n      <td>-80.403278</td>\n      <td>1.079160e+12</td>\n      <td>2.350000e+05</td>\n      <td>5400.000000</td>\n      <td>1470.000000</td>\n      <td>810.000000</td>\n      <td>3299.450000</td>\n      <td>18079.350000</td>\n      <td>2675.850000</td>\n      <td>42823.100000</td>\n      <td>23996.250000</td>\n      <td>2998.125000</td>\n      <td>14.000000</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>25.731810</td>\n      <td>-80.338911</td>\n      <td>3.040300e+12</td>\n      <td>3.100000e+05</td>\n      <td>7500.000000</td>\n      <td>1877.500000</td>\n      <td>2765.500000</td>\n      <td>7106.300000</td>\n      <td>28541.750000</td>\n      <td>6922.600000</td>\n      <td>65852.400000</td>\n      <td>41109.900000</td>\n      <td>6159.750000</td>\n      <td>26.000000</td>\n      <td>0.000000</td>\n      <td>7.000000</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>25.852269</td>\n      <td>-80.258019</td>\n      <td>3.060170e+12</td>\n      <td>4.280000e+05</td>\n      <td>9126.250000</td>\n      <td>2471.000000</td>\n      <td>12352.250000</td>\n      <td>12102.600000</td>\n      <td>44310.650000</td>\n      <td>19200.000000</td>\n      <td>89358.325000</td>\n      <td>53949.375000</td>\n      <td>10854.200000</td>\n      <td>46.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>25.974382</td>\n      <td>-80.119746</td>\n      <td>3.660170e+12</td>\n      <td>2.650000e+06</td>\n      <td>57064.000000</td>\n      <td>6287.000000</td>\n      <td>175020.000000</td>\n      <td>29621.500000</td>\n      <td>75744.900000</td>\n      <td>50399.800000</td>\n      <td>159976.500000</td>\n      <td>110553.800000</td>\n      <td>48167.300000</td>\n      <td>96.000000</td>\n      <td>1.000000</td>\n      <td>12.000000</td>\n      <td>5.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=67}\n``` {.python .cell-code}\ndf.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\n(13932, 17)\n```\n:::\n:::\n\n\n::: {.cell execution_count=68}\n``` {.python .cell-code}\ndf.isnull()\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LATITUDE</th>\n      <th>LONGITUDE</th>\n      <th>PARCELNO</th>\n      <th>SALE_PRC</th>\n      <th>LND_SQFOOT</th>\n      <th>TOT_LVG_AREA</th>\n      <th>SPEC_FEAT_VAL</th>\n      <th>RAIL_DIST</th>\n      <th>OCEAN_DIST</th>\n      <th>WATER_DIST</th>\n      <th>CNTR_DIST</th>\n      <th>SUBCNTR_DI</th>\n      <th>HWY_DIST</th>\n      <th>age</th>\n      <th>avno60plus</th>\n      <th>month_sold</th>\n      <th>structure_quality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>13927</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>13928</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>13929</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>13930</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>13931</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>13932 rows × 17 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=69}\n``` {.python .cell-code}\ndf.dropna(inplace =True)\ndf.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\nLATITUDE             0\nLONGITUDE            0\nPARCELNO             0\nSALE_PRC             0\nLND_SQFOOT           0\nTOT_LVG_AREA         0\nSPEC_FEAT_VAL        0\nRAIL_DIST            0\nOCEAN_DIST           0\nWATER_DIST           0\nCNTR_DIST            0\nSUBCNTR_DI           0\nHWY_DIST             0\nage                  0\navno60plus           0\nmonth_sold           0\nstructure_quality    0\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=70}\n``` {.python .cell-code}\ndf.duplicated().any()\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=71}\n``` {.python .cell-code}\ndf.corr()\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LATITUDE</th>\n      <th>LONGITUDE</th>\n      <th>PARCELNO</th>\n      <th>SALE_PRC</th>\n      <th>LND_SQFOOT</th>\n      <th>TOT_LVG_AREA</th>\n      <th>SPEC_FEAT_VAL</th>\n      <th>RAIL_DIST</th>\n      <th>OCEAN_DIST</th>\n      <th>WATER_DIST</th>\n      <th>CNTR_DIST</th>\n      <th>SUBCNTR_DI</th>\n      <th>HWY_DIST</th>\n      <th>age</th>\n      <th>avno60plus</th>\n      <th>month_sold</th>\n      <th>structure_quality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>LATITUDE</th>\n      <td>1.000000</td>\n      <td>0.721232</td>\n      <td>-0.165487</td>\n      <td>0.047701</td>\n      <td>-0.077481</td>\n      <td>-0.193972</td>\n      <td>-0.007634</td>\n      <td>-0.172382</td>\n      <td>0.242735</td>\n      <td>-0.423396</td>\n      <td>-0.717348</td>\n      <td>-0.195823</td>\n      <td>-0.113443</td>\n      <td>0.416967</td>\n      <td>0.081366</td>\n      <td>-0.023634</td>\n      <td>0.391989</td>\n    </tr>\n    <tr>\n      <th>LONGITUDE</th>\n      <td>0.721232</td>\n      <td>1.000000</td>\n      <td>-0.432816</td>\n      <td>0.195274</td>\n      <td>0.018242</td>\n      <td>-0.181007</td>\n      <td>-0.009372</td>\n      <td>-0.303155</td>\n      <td>-0.457477</td>\n      <td>-0.764256</td>\n      <td>-0.791968</td>\n      <td>-0.380220</td>\n      <td>-0.216406</td>\n      <td>0.488757</td>\n      <td>0.059416</td>\n      <td>-0.010859</td>\n      <td>0.132893</td>\n    </tr>\n    <tr>\n      <th>PARCELNO</th>\n      <td>-0.165487</td>\n      <td>-0.432816</td>\n      <td>1.000000</td>\n      <td>-0.204068</td>\n      <td>0.071381</td>\n      <td>0.102439</td>\n      <td>0.055152</td>\n      <td>0.223387</td>\n      <td>0.289232</td>\n      <td>0.295951</td>\n      <td>0.419933</td>\n      <td>0.243888</td>\n      <td>0.018247</td>\n      <td>-0.270718</td>\n      <td>-0.160925</td>\n      <td>0.011129</td>\n      <td>0.044652</td>\n    </tr>\n    <tr>\n      <th>SALE_PRC</th>\n      <td>0.047701</td>\n      <td>0.195274</td>\n      <td>-0.204068</td>\n      <td>1.000000</td>\n      <td>0.363077</td>\n      <td>0.667301</td>\n      <td>0.497500</td>\n      <td>-0.077009</td>\n      <td>-0.274675</td>\n      <td>-0.127938</td>\n      <td>-0.271425</td>\n      <td>-0.370078</td>\n      <td>0.231877</td>\n      <td>-0.123408</td>\n      <td>-0.027026</td>\n      <td>0.000325</td>\n      <td>0.383995</td>\n    </tr>\n    <tr>\n      <th>LND_SQFOOT</th>\n      <td>-0.077481</td>\n      <td>0.018242</td>\n      <td>0.071381</td>\n      <td>0.363077</td>\n      <td>1.000000</td>\n      <td>0.437472</td>\n      <td>0.390707</td>\n      <td>-0.083901</td>\n      <td>-0.161579</td>\n      <td>-0.055093</td>\n      <td>-0.023181</td>\n      <td>-0.159094</td>\n      <td>0.130488</td>\n      <td>0.101244</td>\n      <td>-0.005899</td>\n      <td>0.005926</td>\n      <td>-0.006686</td>\n    </tr>\n    <tr>\n      <th>TOT_LVG_AREA</th>\n      <td>-0.193972</td>\n      <td>-0.181007</td>\n      <td>0.102439</td>\n      <td>0.667301</td>\n      <td>0.437472</td>\n      <td>1.000000</td>\n      <td>0.506064</td>\n      <td>0.075486</td>\n      <td>-0.050141</td>\n      <td>0.148343</td>\n      <td>0.136526</td>\n      <td>-0.044882</td>\n      <td>0.229497</td>\n      <td>-0.340606</td>\n      <td>-0.056545</td>\n      <td>0.002517</td>\n      <td>0.173422</td>\n    </tr>\n    <tr>\n      <th>SPEC_FEAT_VAL</th>\n      <td>-0.007634</td>\n      <td>-0.009372</td>\n      <td>0.055152</td>\n      <td>0.497500</td>\n      <td>0.390707</td>\n      <td>0.506064</td>\n      <td>1.000000</td>\n      <td>-0.021965</td>\n      <td>-0.055155</td>\n      <td>0.013923</td>\n      <td>-0.048817</td>\n      <td>-0.151916</td>\n      <td>0.153770</td>\n      <td>-0.098780</td>\n      <td>-0.008879</td>\n      <td>-0.014012</td>\n      <td>0.188030</td>\n    </tr>\n    <tr>\n      <th>RAIL_DIST</th>\n      <td>-0.172382</td>\n      <td>-0.303155</td>\n      <td>0.223387</td>\n      <td>-0.077009</td>\n      <td>-0.083901</td>\n      <td>0.075486</td>\n      <td>-0.021965</td>\n      <td>1.000000</td>\n      <td>0.258966</td>\n      <td>0.162313</td>\n      <td>0.444494</td>\n      <td>0.485468</td>\n      <td>-0.092495</td>\n      <td>-0.234515</td>\n      <td>-0.116955</td>\n      <td>0.010560</td>\n      <td>-0.074075</td>\n    </tr>\n    <tr>\n      <th>OCEAN_DIST</th>\n      <td>0.242735</td>\n      <td>-0.457477</td>\n      <td>0.289232</td>\n      <td>-0.274675</td>\n      <td>-0.161579</td>\n      <td>-0.050141</td>\n      <td>-0.055155</td>\n      <td>0.258966</td>\n      <td>1.000000</td>\n      <td>0.490764</td>\n      <td>0.245396</td>\n      <td>0.425869</td>\n      <td>0.093500</td>\n      <td>-0.159409</td>\n      <td>0.035215</td>\n      <td>-0.012723</td>\n      <td>0.209497</td>\n    </tr>\n    <tr>\n      <th>WATER_DIST</th>\n      <td>-0.423396</td>\n      <td>-0.764256</td>\n      <td>0.295951</td>\n      <td>-0.127938</td>\n      <td>-0.055093</td>\n      <td>0.148343</td>\n      <td>0.013923</td>\n      <td>0.162313</td>\n      <td>0.490764</td>\n      <td>1.000000</td>\n      <td>0.526952</td>\n      <td>0.195280</td>\n      <td>0.400233</td>\n      <td>-0.330578</td>\n      <td>-0.096339</td>\n      <td>0.010556</td>\n      <td>-0.034343</td>\n    </tr>\n    <tr>\n      <th>CNTR_DIST</th>\n      <td>-0.717348</td>\n      <td>-0.791968</td>\n      <td>0.419933</td>\n      <td>-0.271425</td>\n      <td>-0.023181</td>\n      <td>0.136526</td>\n      <td>-0.048817</td>\n      <td>0.444494</td>\n      <td>0.245396</td>\n      <td>0.526952</td>\n      <td>1.000000</td>\n      <td>0.766387</td>\n      <td>0.076484</td>\n      <td>-0.548287</td>\n      <td>-0.130857</td>\n      <td>0.023096</td>\n      <td>-0.330588</td>\n    </tr>\n    <tr>\n      <th>SUBCNTR_DI</th>\n      <td>-0.195823</td>\n      <td>-0.380220</td>\n      <td>0.243888</td>\n      <td>-0.370078</td>\n      <td>-0.159094</td>\n      <td>-0.044882</td>\n      <td>-0.151916</td>\n      <td>0.485468</td>\n      <td>0.425869</td>\n      <td>0.195280</td>\n      <td>0.766387</td>\n      <td>1.000000</td>\n      <td>-0.093982</td>\n      <td>-0.385278</td>\n      <td>-0.073202</td>\n      <td>0.016334</td>\n      <td>-0.248656</td>\n    </tr>\n    <tr>\n      <th>HWY_DIST</th>\n      <td>-0.113443</td>\n      <td>-0.216406</td>\n      <td>0.018247</td>\n      <td>0.231877</td>\n      <td>0.130488</td>\n      <td>0.229497</td>\n      <td>0.153770</td>\n      <td>-0.092495</td>\n      <td>0.093500</td>\n      <td>0.400233</td>\n      <td>0.076484</td>\n      <td>-0.093982</td>\n      <td>1.000000</td>\n      <td>-0.120505</td>\n      <td>-0.019788</td>\n      <td>-0.004547</td>\n      <td>0.193529</td>\n    </tr>\n    <tr>\n      <th>age</th>\n      <td>0.416967</td>\n      <td>0.488757</td>\n      <td>-0.270718</td>\n      <td>-0.123408</td>\n      <td>0.101244</td>\n      <td>-0.340606</td>\n      <td>-0.098780</td>\n      <td>-0.234515</td>\n      <td>-0.159409</td>\n      <td>-0.330578</td>\n      <td>-0.548287</td>\n      <td>-0.385278</td>\n      <td>-0.120505</td>\n      <td>1.000000</td>\n      <td>0.110325</td>\n      <td>-0.038904</td>\n      <td>0.009253</td>\n    </tr>\n    <tr>\n      <th>avno60plus</th>\n      <td>0.081366</td>\n      <td>0.059416</td>\n      <td>-0.160925</td>\n      <td>-0.027026</td>\n      <td>-0.005899</td>\n      <td>-0.056545</td>\n      <td>-0.008879</td>\n      <td>-0.116955</td>\n      <td>0.035215</td>\n      <td>-0.096339</td>\n      <td>-0.130857</td>\n      <td>-0.073202</td>\n      <td>-0.019788</td>\n      <td>0.110325</td>\n      <td>1.000000</td>\n      <td>-0.020870</td>\n      <td>0.096050</td>\n    </tr>\n    <tr>\n      <th>month_sold</th>\n      <td>-0.023634</td>\n      <td>-0.010859</td>\n      <td>0.011129</td>\n      <td>0.000325</td>\n      <td>0.005926</td>\n      <td>0.002517</td>\n      <td>-0.014012</td>\n      <td>0.010560</td>\n      <td>-0.012723</td>\n      <td>0.010556</td>\n      <td>0.023096</td>\n      <td>0.016334</td>\n      <td>-0.004547</td>\n      <td>-0.038904</td>\n      <td>-0.020870</td>\n      <td>1.000000</td>\n      <td>-0.011023</td>\n    </tr>\n    <tr>\n      <th>structure_quality</th>\n      <td>0.391989</td>\n      <td>0.132893</td>\n      <td>0.044652</td>\n      <td>0.383995</td>\n      <td>-0.006686</td>\n      <td>0.173422</td>\n      <td>0.188030</td>\n      <td>-0.074075</td>\n      <td>0.209497</td>\n      <td>-0.034343</td>\n      <td>-0.330588</td>\n      <td>-0.248656</td>\n      <td>0.193529</td>\n      <td>0.009253</td>\n      <td>0.096050</td>\n      <td>-0.011023</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=72}\n``` {.python .cell-code}\ndf.drop(['LONGITUDE', 'WATER_DIST'], axis=1,inplace=True)\n```\n:::\n\n\n::: {.cell execution_count=73}\n``` {.python .cell-code}\nlow_corr_features = ['PARCELNO', 'age', 'avno60plus', 'month_sold']\ndf.drop(low_corr_features, axis=1,inplace=True)\n```\n:::\n\n\n::: {.cell execution_count=74}\n``` {.python .cell-code}\ndf.corr()\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LATITUDE</th>\n      <th>SALE_PRC</th>\n      <th>LND_SQFOOT</th>\n      <th>TOT_LVG_AREA</th>\n      <th>SPEC_FEAT_VAL</th>\n      <th>RAIL_DIST</th>\n      <th>OCEAN_DIST</th>\n      <th>CNTR_DIST</th>\n      <th>SUBCNTR_DI</th>\n      <th>HWY_DIST</th>\n      <th>structure_quality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>LATITUDE</th>\n      <td>1.000000</td>\n      <td>0.047701</td>\n      <td>-0.077481</td>\n      <td>-0.193972</td>\n      <td>-0.007634</td>\n      <td>-0.172382</td>\n      <td>0.242735</td>\n      <td>-0.717348</td>\n      <td>-0.195823</td>\n      <td>-0.113443</td>\n      <td>0.391989</td>\n    </tr>\n    <tr>\n      <th>SALE_PRC</th>\n      <td>0.047701</td>\n      <td>1.000000</td>\n      <td>0.363077</td>\n      <td>0.667301</td>\n      <td>0.497500</td>\n      <td>-0.077009</td>\n      <td>-0.274675</td>\n      <td>-0.271425</td>\n      <td>-0.370078</td>\n      <td>0.231877</td>\n      <td>0.383995</td>\n    </tr>\n    <tr>\n      <th>LND_SQFOOT</th>\n      <td>-0.077481</td>\n      <td>0.363077</td>\n      <td>1.000000</td>\n      <td>0.437472</td>\n      <td>0.390707</td>\n      <td>-0.083901</td>\n      <td>-0.161579</td>\n      <td>-0.023181</td>\n      <td>-0.159094</td>\n      <td>0.130488</td>\n      <td>-0.006686</td>\n    </tr>\n    <tr>\n      <th>TOT_LVG_AREA</th>\n      <td>-0.193972</td>\n      <td>0.667301</td>\n      <td>0.437472</td>\n      <td>1.000000</td>\n      <td>0.506064</td>\n      <td>0.075486</td>\n      <td>-0.050141</td>\n      <td>0.136526</td>\n      <td>-0.044882</td>\n      <td>0.229497</td>\n      <td>0.173422</td>\n    </tr>\n    <tr>\n      <th>SPEC_FEAT_VAL</th>\n      <td>-0.007634</td>\n      <td>0.497500</td>\n      <td>0.390707</td>\n      <td>0.506064</td>\n      <td>1.000000</td>\n      <td>-0.021965</td>\n      <td>-0.055155</td>\n      <td>-0.048817</td>\n      <td>-0.151916</td>\n      <td>0.153770</td>\n      <td>0.188030</td>\n    </tr>\n    <tr>\n      <th>RAIL_DIST</th>\n      <td>-0.172382</td>\n      <td>-0.077009</td>\n      <td>-0.083901</td>\n      <td>0.075486</td>\n      <td>-0.021965</td>\n      <td>1.000000</td>\n      <td>0.258966</td>\n      <td>0.444494</td>\n      <td>0.485468</td>\n      <td>-0.092495</td>\n      <td>-0.074075</td>\n    </tr>\n    <tr>\n      <th>OCEAN_DIST</th>\n      <td>0.242735</td>\n      <td>-0.274675</td>\n      <td>-0.161579</td>\n      <td>-0.050141</td>\n      <td>-0.055155</td>\n      <td>0.258966</td>\n      <td>1.000000</td>\n      <td>0.245396</td>\n      <td>0.425869</td>\n      <td>0.093500</td>\n      <td>0.209497</td>\n    </tr>\n    <tr>\n      <th>CNTR_DIST</th>\n      <td>-0.717348</td>\n      <td>-0.271425</td>\n      <td>-0.023181</td>\n      <td>0.136526</td>\n      <td>-0.048817</td>\n      <td>0.444494</td>\n      <td>0.245396</td>\n      <td>1.000000</td>\n      <td>0.766387</td>\n      <td>0.076484</td>\n      <td>-0.330588</td>\n    </tr>\n    <tr>\n      <th>SUBCNTR_DI</th>\n      <td>-0.195823</td>\n      <td>-0.370078</td>\n      <td>-0.159094</td>\n      <td>-0.044882</td>\n      <td>-0.151916</td>\n      <td>0.485468</td>\n      <td>0.425869</td>\n      <td>0.766387</td>\n      <td>1.000000</td>\n      <td>-0.093982</td>\n      <td>-0.248656</td>\n    </tr>\n    <tr>\n      <th>HWY_DIST</th>\n      <td>-0.113443</td>\n      <td>0.231877</td>\n      <td>0.130488</td>\n      <td>0.229497</td>\n      <td>0.153770</td>\n      <td>-0.092495</td>\n      <td>0.093500</td>\n      <td>0.076484</td>\n      <td>-0.093982</td>\n      <td>1.000000</td>\n      <td>0.193529</td>\n    </tr>\n    <tr>\n      <th>structure_quality</th>\n      <td>0.391989</td>\n      <td>0.383995</td>\n      <td>-0.006686</td>\n      <td>0.173422</td>\n      <td>0.188030</td>\n      <td>-0.074075</td>\n      <td>0.209497</td>\n      <td>-0.330588</td>\n      <td>-0.248656</td>\n      <td>0.193529</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=75}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.histplot(df['CNTR_DIST'], bins=30, kde=True)\nplt.title('Distribution of CNTR_DIST')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-76-output-1.png){width=676 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=76}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.regplot(x='OCEAN_DIST', y='SALE_PRC', data=df)\nplt.title('Regression plot of OCEAN_DIST vs. SALE_PRC')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-77-output-1.png){width=663 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=77}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.scatterplot(x='LND_SQFOOT', y='SALE_PRC', data=df)\nplt.title('Scatter plot of LND_SQFOOT vs. SALE_PRC')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-78-output-1.png){width=663 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=78}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.histplot(df['SALE_PRC'], bins=30, kde=True)\nplt.title('Distribution of SALE_PRC')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-79-output-1.png){width=676 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=79}\n``` {.python .cell-code}\nsns.set(style=\"darkgrid\")\ncolor_palette = \"viridis\"\nsns.relplot(x='CNTR_DIST', y='SALE_PRC', sizes=(1, 100), hue='TOT_LVG_AREA', palette=color_palette, size='SALE_PRC', data=df)\nplt.xlabel('Distance to Miami Central Business')\nplt.ylabel('Sale Price')\nplt.ticklabel_format(style='plain', axis='y')\nplt.xticks(fontsize=8)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-80-output-1.png){width=637 height=445}\n:::\n:::\n\n\n::: {.cell execution_count=80}\n``` {.python .cell-code}\nsns.scatterplot(x='HWY_DIST', y='SALE_PRC', data=df)\nplt.title('Scatter plot of HWY_DIST vs. SALE_PRC')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-81-output-1.png){width=608 height=455}\n:::\n:::\n\n\n::: {.cell execution_count=81}\n``` {.python .cell-code}\nsns.histplot(df['RAIL_DIST'], bins=30, kde=True)\nplt.title('Distribution of RAIL_DIST')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-82-output-1.png){width=608 height=455}\n:::\n:::\n\n\n::: {.cell execution_count=82}\n``` {.python .cell-code}\nfeatures = ['LATITUDE', 'LONGITUDE', 'LND_SQFOOT', 'TOT_LVG_AREA', 'SPEC_FEAT_VAL', 'RAIL_DIST', 'OCEAN_DIST', 'WATER_DIST', 'CNTR_DIST', 'SUBCNTR_DI', 'HWY_DIST', 'age', 'avno60plus', 'month_sold', 'structure_quality']\ntarget = 'SALE_PRC'\n```\n:::\n\n\n::: {.cell execution_count=83}\n``` {.python .cell-code}\ndf = pd.read_csv('miami-housing.csv')\nX = df[features]\ny = df[target]\n```\n:::\n\n\n::: {.cell execution_count=84}\n``` {.python .cell-code}\ncorrelation_matrix = df[features + [target]].corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation_matrix,  cmap=\"coolwarm\", fmt=\".2f\")\nfor i in range(len(correlation_matrix)):\n    for j in range(len(correlation_matrix)):\n        plt.text(j + 0.5, i + 0.5, f\"{correlation_matrix.iloc[i, j]:.2f}\", ha='center', va='center', fontsize=10)\nplt.title(\"Correlation Heatmap\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-85-output-1.png){width=848 height=615}\n:::\n:::\n\n\n::: {.cell execution_count=85}\n``` {.python .cell-code}\nsns.histplot(df[target], kde=True)\nplt.title(\"Distribution of Sale Price\")\nplt.xlabel(\"Sale Price\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-86-output-1.png){width=597 height=455}\n:::\n:::\n\n\n::: {.cell execution_count=86}\n``` {.python .cell-code}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\ngb_model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3)\nmodel = gb_model.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nr2_score(y_pred,y_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=86}\n```\n0.8851074423455013\n```\n:::\n:::\n\n\n::: {.cell execution_count=87}\n``` {.python .cell-code}\nfea_importances = model.feature_importances_\n\nfea_importance_df = pd.DataFrame({'Feature': features, 'Importance': fea_importances})\n```\n:::\n\n\n::: {.cell execution_count=88}\n``` {.python .cell-code}\nfea_importance_df = fea_importance_df.sort_values(by='Importance', ascending=False)\n```\n:::\n\n\n::: {.cell execution_count=89}\n``` {.python .cell-code}\nplt.barh(fea_importance_df['Feature'], fea_importance_df['Importance'])\nplt.xlabel('Importance')\nplt.title('Feature Importance')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-90-output-1.png){width=672 height=455}\n:::\n:::\n\n\n::: {.cell execution_count=90}\n``` {.python .cell-code}\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nchosen_feature = 'LATITUDE'\ny = df['SALE_PRC']\npoly_features = PolynomialFeatures(degree=2, include_bias=False)\nX_poly = poly_features.fit_transform(X[[chosen_feature]])\nlin_reg = LinearRegression()\nlin_reg.fit(X_poly, y)\nplt.scatter(X[chosen_feature], y, color='r', label='Original Data')\nX_line = np.linspace(X[chosen_feature].min(), X[chosen_feature].max(), 100).reshape(-1, 1)\nX_line_poly = poly_features.transform(X_line)\ny_line_pred = lin_reg.predict(X_line_poly)\nplt.plot(X_line, y_line_pred, color='b', label='Polynomial Regression')\nplt.xlabel(chosen_feature)\nplt.ylabel('SALE_PRC')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-91-output-1.png){width=606 height=450}\n:::\n:::\n\n\n::: {.cell execution_count=91}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)\n```\n:::\n\n\n::: {.cell execution_count=92}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\n\ny = df['SALE_PRC']\nnum_features = X.shape[1]\nfig, axes = plt.subplots(nrows=num_features, ncols=1, figsize=(10, 2*num_features))\n\nfor i, feature in enumerate(X.columns):\n    X_single_feature = X[feature].values.reshape(-1, 1)\n    lin_reg = LinearRegression()\n    lin_reg.fit(X_single_feature, y)\n    axes[i].scatter(X[feature], y, color='r', label='Original Data')\n    X_line = np.linspace(X[feature].min(), X[feature].max(), 100).reshape(-1, 1)\n    y_line_pred = lin_reg.predict(X_line)\n    axes[i].plot(X_line, y_line_pred, color='b', label='Simple Linear Regression')\n    axes[i].set_xlabel(feature)\n    axes[i].set_ylabel('SALE_PRC')\n    axes[i].legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-93-output-1.png){width=820 height=2298}\n:::\n:::\n\n\n::: {.cell execution_count=93}\n``` {.python .cell-code}\npoly_features = PolynomialFeatures(degree=2, include_bias=False)\nX_poly = poly_features.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.2, random_state=42)\npoly_reg_model = LinearRegression()\npoly_reg_model.fit(X_train, y_train)\naccuracy = poly_reg_model.score(X_test, y_test)\nprint(f\"Polynomial Regression Model Accuracy: {accuracy}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPolynomial Regression Model Accuracy: 0.881111708167996\n```\n:::\n:::\n\n\n::: {.cell execution_count=94}\n``` {.python .cell-code}\nX_poly.round(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=94}\n```\narray([[ 2.589e+01, -8.016e+01,  9.375e+03, ...,  6.400e+01,  3.200e+01,\n         1.600e+01],\n       [ 2.589e+01, -8.015e+01,  9.375e+03, ...,  8.100e+01,  3.600e+01,\n         1.600e+01],\n       [ 2.589e+01, -8.015e+01,  9.375e+03, ...,  4.000e+00,  8.000e+00,\n         1.600e+01],\n       ...,\n       [ 2.578e+01, -8.026e+01,  8.460e+03, ...,  4.900e+01,  2.800e+01,\n         1.600e+01],\n       [ 2.578e+01, -8.026e+01,  7.500e+03, ...,  6.400e+01,  3.200e+01,\n         1.600e+01],\n       [ 2.578e+01, -8.026e+01,  8.833e+03, ...,  1.210e+02,  4.400e+01,\n         1.600e+01]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=95}\n``` {.python .cell-code}\nprint(poly_reg_model.coef_.round(2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 1.64638752e+09  1.43501940e+08  1.99361000e+03  7.18771000e+03\n  5.72473000e+03  1.09326100e+04 -2.20423400e+04 -2.27902000e+03\n  5.99300000e+01 -8.40520000e+02 -1.25848900e+04 -1.22307374e+06\n -1.67500006e+06 -1.76007415e+06  2.15822777e+07  4.92283607e+06\n  2.37884737e+07 -7.24700000e+01 -2.26910000e+02 -2.41000000e+01\n -6.05400000e+01  7.95200000e+01  8.66300000e+01  5.84100000e+01\n -5.57000000e+00  4.27100000e+01  9.13476000e+03  1.16614383e+07\n -2.10318000e+03 -8.07204800e+04  4.66524507e+06  1.23000000e+00\n  1.33300000e+01  6.36000000e+01  1.16820000e+02 -2.49730000e+02\n -2.30000000e-01  1.92500000e+01 -1.20200000e+01 -1.43320000e+02\n -1.23242000e+04  3.73434037e+06 -2.26988600e+04  2.44413360e+05\n -0.00000000e+00 -0.00000000e+00  0.00000000e+00  0.00000000e+00\n  0.00000000e+00  0.00000000e+00 -0.00000000e+00  0.00000000e+00\n  0.00000000e+00  1.00000000e-01 -2.84000000e+00  3.00000000e-02\n -3.70000000e-01  1.00000000e-02  0.00000000e+00 -0.00000000e+00\n -0.00000000e+00  0.00000000e+00 -0.00000000e+00  0.00000000e+00\n  0.00000000e+00 -2.56000000e+00 -8.56900000e+01 -1.20000000e-01\n  2.69200000e+01 -0.00000000e+00  0.00000000e+00  0.00000000e+00\n -0.00000000e+00  0.00000000e+00 -0.00000000e+00  0.00000000e+00\n -4.00000000e-02 -2.83000000e+00  1.00000000e-02  3.50000000e-01\n -0.00000000e+00  0.00000000e+00  0.00000000e+00 -0.00000000e+00\n  0.00000000e+00 -0.00000000e+00  1.00000000e-02  4.45000000e+00\n  3.00000000e-02  1.29000000e+00 -0.00000000e+00 -0.00000000e+00\n -0.00000000e+00  0.00000000e+00 -0.00000000e+00 -6.00000000e-02\n -1.37300000e+01  3.00000000e-02  6.00000000e-02 -0.00000000e+00\n  0.00000000e+00 -0.00000000e+00  0.00000000e+00  8.00000000e-02\n  4.09000000e+00  1.00000000e-02  7.20000000e-01 -0.00000000e+00\n  0.00000000e+00 -0.00000000e+00 -1.00000000e-02  4.62000000e+01\n -8.00000000e-02 -6.50000000e-01  0.00000000e+00  0.00000000e+00\n  3.00000000e-02 -3.48700000e+01  5.00000000e-02  1.60000000e-01\n  0.00000000e+00  4.00000000e-02 -1.87100000e+01 -7.00000000e-02\n  1.34000000e+00  9.35000000e+00  6.75860000e+02 -1.79900000e+01\n  1.14010000e+02  5.66658400e+05  1.42371000e+03 -2.88494500e+04\n -1.58070000e+02 -8.33910000e+02  1.79120600e+04]\n```\n:::\n:::\n\n\n::: {.cell execution_count=96}\n``` {.python .cell-code}\nprint(poly_reg_model.intercept_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-15030137122.62008\n```\n:::\n:::\n\n\n::: {.cell execution_count=97}\n``` {.python .cell-code}\ndegree = 2\nfig, axes = plt.subplots(nrows=num_features, ncols=1, figsize=(10, 2*num_features))\nfig.tight_layout(h_pad=4)\nfor i, feature in enumerate(X.columns):\n    X_single_feature = X[feature].values.reshape(-1, 1)\n    poly_features = PolynomialFeatures(degree=degree, include_bias=False)\n    X_poly = poly_features.fit_transform(X_single_feature)\n    poly_reg = LinearRegression()\n    poly_reg.fit(X_poly, y)\n    axes[i].scatter(X[feature], y, color='r', label='Original Data')\n    X_line = np.linspace(X[feature].min(), X[feature].max(), 100).reshape(-1, 1)\n    X_line_poly = poly_features.transform(X_line)\n    y_line_pred = poly_reg.predict(X_line_poly)\n    axes[i].plot(X_line, y_line_pred, color='b', label=f'Polynomial Regression (Degree {degree})')\n    axes[i].set_xlabel(feature)\n    axes[i].set_ylabel('SALE_PRC')\n    axes[i].legend()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-98-output-1.png){width=950 height=2894}\n:::\n:::\n\n\n::: {.cell execution_count=98}\n``` {.python .cell-code}\npoly_features = PolynomialFeatures(degree=2, include_bias=False)\nX_poly = poly_features.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.2, random_state=42)\npoly_reg_model = LinearRegression()\npoly_reg_model.fit(X_train, y_train)\naccuracy = poly_reg_model.score(X_test, y_test)\nprint(f\"Polynomial Regression Model Accuracy: {accuracy}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPolynomial Regression Model Accuracy: 0.881111708167996\n```\n:::\n:::\n\n\n::: {.cell execution_count=99}\n``` {.python .cell-code}\nnum_features = X.shape[1]\ndegree = 3\nfig, axes = plt.subplots(nrows=num_features, ncols=1, figsize=(10, 2*num_features))\nfig.tight_layout(h_pad=4)\nfor i, feature in enumerate(X.columns):\n    X_single_feature = X[feature].values.reshape(-1, 1)\n    poly_features = PolynomialFeatures(degree=degree, include_bias=True) \n    X_poly = poly_features.fit_transform(X_single_feature)\n    poly_reg = LinearRegression()\n    poly_reg.fit(X_poly, y)\n    axes[i].scatter(X[feature], y, color='r', label='Original Data')\n    X_line = np.linspace(X[feature].min(), X[feature].max(), 100).reshape(-1, 1)\n    X_line_poly = poly_features.transform(X_line)\n    y_line_pred = poly_reg.predict(X_line_poly)\n    axes[i].plot(X_line, y_line_pred, color='b', label=f'Polynomial Regression (Degree {degree})')\n    axes[i].set_xlabel(feature)\n    axes[i].set_ylabel('SALE_PRC')\n    axes[i].legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-100-output-1.png){width=971 height=2894}\n:::\n:::\n\n\n::: {.cell execution_count=100}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import PolynomialFeatures\nX = df[features]\ndegree = 3\npoly_features = PolynomialFeatures(degree=degree, include_bias=False)\nX_poly = poly_features.fit_transform(X)\npoly_feature = poly_features.get_feature_names_out(X.columns)\nX_poly_df = pd.DataFrame(X_poly, columns=poly_feature)\nprint(X_poly_df.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    LATITUDE  LONGITUDE  LND_SQFOOT  TOT_LVG_AREA  SPEC_FEAT_VAL  RAIL_DIST  \\\n0  25.891031 -80.160561      9375.0        1753.0            0.0     2815.9   \n1  25.891324 -80.153968      9375.0        1715.0            0.0     4359.1   \n2  25.891334 -80.153740      9375.0        2276.0        49206.0     4412.9   \n3  25.891765 -80.152657     12450.0        2058.0        10033.0     4585.0   \n4  25.891825 -80.154639     12800.0        1684.0        16681.0     4063.4   \n\n   OCEAN_DIST  WATER_DIST  CNTR_DIST  SUBCNTR_DI  ...  avno60plus^3  \\\n0     12811.4       347.6    42815.3     37742.2  ...           0.0   \n1     10648.4       337.8    43504.9     37340.5  ...           0.0   \n2     10574.1       297.1    43530.4     37328.7  ...           0.0   \n3     10156.5         0.0    43797.5     37423.2  ...           0.0   \n4     10836.8       326.6    43599.7     37550.8  ...           0.0   \n\n   avno60plus^2 month_sold  avno60plus^2 structure_quality  \\\n0                      0.0                             0.0   \n1                      0.0                             0.0   \n2                      0.0                             0.0   \n3                      0.0                             0.0   \n4                      0.0                             0.0   \n\n   avno60plus month_sold^2  avno60plus month_sold structure_quality  \\\n0                      0.0                                      0.0   \n1                      0.0                                      0.0   \n2                      0.0                                      0.0   \n3                      0.0                                      0.0   \n4                      0.0                                      0.0   \n\n   avno60plus structure_quality^2  month_sold^3  \\\n0                             0.0         512.0   \n1                             0.0         729.0   \n2                             0.0           8.0   \n3                             0.0         729.0   \n4                             0.0         343.0   \n\n   month_sold^2 structure_quality  month_sold structure_quality^2  \\\n0                           256.0                           128.0   \n1                           324.0                           144.0   \n2                            16.0                            32.0   \n3                           324.0                           144.0   \n4                           196.0                           112.0   \n\n   structure_quality^3  \n0                 64.0  \n1                 64.0  \n2                 64.0  \n3                 64.0  \n4                 64.0  \n\n[5 rows x 815 columns]\n```\n:::\n:::\n\n\n::: {.cell execution_count=101}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.metrics import confusion_matrix, roc_auc_score\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom datetime import datetime\n\ndf = pd.read_csv('miami-housing.csv')\nthresholdPrice = 500000\ndf['Above_Threshold'] = (df['SALE_PRC'] > thresholdPrice).astype(int)\ndf = df.drop(['PARCELNO'], axis=1)\ny = df['Above_Threshold'].values\nlabelencoder = LabelEncoder()\nY = labelencoder.fit_transform(y)   \nX = df.drop(labels=['Above_Threshold', 'SALE_PRC'], axis=1)  \nfeature_names = np.array(X.columns)\nscaler = StandardScaler()\nscaler.fit(X)\nX = scaler.transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n\ndtrain_lgb = lgb.Dataset(X_train, label=y_train)\n\nlgbm_params = {\n    'learning_rate': 0.05,\n    'boosting_type': 'gbdt',\n    'objective': 'binary',\n    'metric': ['auc', 'binary_logloss'],\n    'num_leaves': 100,\n    'max_depth': 10\n}\nstartLgb = datetime.now()\nclf_lgb = lgb.train(lgbm_params, dtrain_lgb, 50)\nstopLgb = datetime.now()\nexecutionTime_lgb = stopLgb - startLgb\nypred_lgb = clf_lgb.predict(X_test)\nypred_lgb = (ypred_lgb >= 0.5).astype(int)\ndtrain_xgb = xgb.DMatrix(X_train, label=y_train)\nparameters_xgb = {\n    'max_depth': 10,\n    'objective': 'binary:logistic',\n    'eval_metric': 'auc',\n    'learning_rate': 0.05\n}\nstartXgb = datetime.now()\nxg = xgb.train(parameters_xgb, dtrain_xgb, 50)\nstopXgb = datetime.now()\nexecutionTime_xgb = stopXgb - startXgb\ndtest_xgb = xgb.DMatrix(X_test)\nypred_xgb = xg.predict(dtest_xgb)\nypred_xgb = (ypred_xgb >= 0.5).astype(int)\ncm_xgb = confusion_matrix(y_test, ypred_xgb)\nsns.heatmap(cm_xgb,fmt='g',cmap=\"crest\" )\nfor i in range(len(cm_xgb)):\n    for j in range(len(cm_xgb[0])):\n        plt.text(j + 0.5, i + 0.5, str(cm_xgb[i, j]), ha='center', va='center', fontsize=16, color='white')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('XGBoost Confusion Matrix')\nplt.show() \nprint(\"_________________________________________________\")\nprint(\"LGBM execution time is: \", executionTime_lgb )\nprint(\"XGBoost execution time is: \", executionTime_xgb)\nprint(\"_________________________________________________\")\nprint(\"Accuracy with LGBM = \", np.mean(ypred_lgb == y_test))\nprint(\"Accuracy with XGBoost = \", np.mean(ypred_xgb == y_test))\nprint(\"___________________________________________________\")\nprint(\"AUC score with LGBM is: \", roc_auc_score(y_test, ypred_lgb))\nprint(\"AUC score with XGBoost is: \", roc_auc_score(y_test,ypred_xgb))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[LightGBM] [Info] Number of positive: 2015, number of negative: 9130\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000390 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 2921\n[LightGBM] [Info] Number of data points in the train set: 11145, number of used features: 15\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.180799 -> initscore=-1.510946\n[LightGBM] [Info] Start training from score -1.510946\n_________________________________________________\nLGBM execution time is:  0:00:00.094721\nXGBoost execution time is:  0:00:00.178523\n_________________________________________________\nAccuracy with LGBM =  0.9551489056332975\nAccuracy with XGBoost =  0.9529960531036957\n___________________________________________________\nAUC score with LGBM is:  0.9180927441443535\nAUC score with XGBoost is:  0.9174731495161104\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-102-output-2.png){width=572 height=455}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}